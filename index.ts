import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import { OpenAI } from "openai";

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const bot = new TelegramBot(process.env.BOTKEY, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é!", {
      reply_markup: {
        keyboard: [["–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ"], ["–ß–∞—Ç —Å –±–æ—Ç–æ–º"]],
        resize_keyboard: true,
      },
    });
  } catch (error) {
    console.error("Error handling /start command:", error);
    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userText = msg.text;

  if (msg.entities && msg.entities[0].type === 'bot_command') {
    // Ignore commands
    return;
  }
  
  try {
    if (userText === "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ") {
      const message = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ LAKATON. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–Ω–µ:
    
  ü§ñ **GitHub:** [–°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π GitHub](https://github.com/FxFurEN/latoken-bot)`;
    
      await bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          keyboard: [["–ß–∞—Ç —Å –±–æ—Ç–æ–º"]],
          resize_keyboard: true,
        },
      });
    }
     else if (userText === "–ß–∞—Ç —Å –±–æ—Ç–æ–º") {
      await bot.sendMessage(chatId, "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!", {
        reply_markup: {
          keyboard: [["–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ"]],
          resize_keyboard: true,
        },
      });
    } else {
      const aiResponse = await getOpenAIResponse(userText);
      bot.sendMessage(chatId, aiResponse, {
        reply_markup: {
          keyboard: [["–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ"]],
          resize_keyboard: true,
        },
      });
    }
  } catch (error) {
    console.error("Error handling user message:", error);
    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

async function getOpenAIResponse(userText) {
  const prompt = `You are an AI assistant at LATOKEN. Answer questions naturally and informatively based on the provided information:
  –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  
  - https://deliver.latoken.com/hackathon
  - https://coda.io/@latoken/latoken-talent/the-principles-olympics-of-freedom-and-responsibility-to-build-t-60 - –∑–¥–µ—Å—å –æ—Ç–≤–µ—Ç—å —á–µ—Ç–∫–æ –∫–∞–∫ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ
  - https://deliver.latoken.com/jobs - –¥–∞–ª—å—à–µ —Ç—É—Ç –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ 3 –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ https://deliver.latoken.com/jobs/gptxweb3 –∏ https://hh.ru/vacancy/98569710?hhtmFrom=employer_vacancies –∏ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π/–ø—Ä–æ–¥–∞–∂ –ú–µ–Ω—è—é—â–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ —Ñ–∞–Ω–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  - https://deliver.latoken.com/about
  
  –•–∞–∫–∞—Ç–æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:
  
  –ü—è—Ç–Ω–∏—Ü–∞ 28 –∏—é–Ω—è
  
  18:00 –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
  
  –°—É–±–±–æ—Ç–∞ 29 –∏—é–Ω—è: 
  
  17:00 –ß–µ–∫–ø–æ–∏–Ω—Ç.
  
  18:00 –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
  
  19:00 –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ñ—Ñ–µ—Ä—ã.
  
  –í–æ–ø—Ä–æ—Å: ${userText}`;

  const response = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      { role: "user", content: prompt }
    ],
    temperature: 0.5,
    max_tokens: 3500,
  });

  return response.choices[0].message.content.trim();
}

console.log("Bot is running...");
